{"remainingRequest":"/Users/ray/bouncing/o2/public/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ray/bouncing/o2/public/app.vue?vue&type=style&index=0&id=e2182676&scoped=true&lang=css&","dependencies":[{"path":"/Users/ray/bouncing/o2/public/app.vue","mtime":1566617553000},{"path":"/Users/ray/bouncing/o2/public/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/usr/local/opt/nvm/versions/node/v12.4.0/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/ray/bouncing/o2/public/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ray/bouncing/o2/public/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import 'styles.css';\n",{"version":3,"sources":["app.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgHA","file":"app.vue","sourceRoot":".","sourcesContent":["\n/* eslint-disable */\n\n<template>\n\t<div class=\"container\">\n\t\t<h2>Socket Controller</h2>\n\t\t<p>{{ msg }}</p>\n\t\t<button v-on:click=\"groups\"> WTF </button>\n\t\t<div class=\"card\">\n\t\t\t<div class=\"outlets\" v-if=\"physical_groups.length > 0\">\n\t\t\t\t<div class=\"group group-double\" v-for=\"group in physical_groups\">\n\t\t\t\t\t<!-- {{group.id}} -->\n\t\t\t\t\t\t<button v-for=\"socket in group.sockets\" class=\"socket socket-double always-on\" v-on:click=\"toggle(socket)\" v-bind:class=\"{ active: socket.type === 'static' || socket.pin === null || socket.pin.value === 0 }\">\n\t\t\t\t\t\t\t{{ socket.id }}\n\t\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\n\tconst axios = require('axios');\n\n\tconst base = `http://`;\n\n\tconst prod_url = 'omega-498f.local';\n\n\tconst dev_url = 'localhost'\n\n\tconst port = ':8888';\n\n\tconsole.log('current env', process.env.NODE_ENV);\n\n\tconst url = process.env.NODE_ENV === 'production' ? dev_url : dev_url;\n\n\tconst base_url = base + url + port;\n\n\texport default {\n\t\tname: 'app',\n\t\tdata: () => {\n\t\t\treturn {\n\t\t\t\thello: 'Hai gais!',\n\t\t\t\tmsg: `System: OK...`,\n\t\t\t\tgrps: [],\n\t\t\t\tsckts: [],\n\t\t\t\tphysical_groups: [],\n\t\t\t\tcurrent_layout: {}\n\t\t\t}\n\t\t},\n\t\tmounted: function () {\n\t\t\tconsole.log('app is mounted');\n\t\t\tthis.groups();\n\t\t\tthis.sockets();\n\t\t},\n\t\tmethods: {\n\t\t\tgroups: function () {\n\t\t\t\tconsole.log('groups called...');\n\n\t\t\t\taxios.get(`${base_url}/groups`).then(\n\t\t\t\t\t(res, err) => {\n\t\t\t\t\t\tif(err) {\n\t\t\t\t\t\t\tconsole.log('error: ', err);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.grps = res.data && res.data.groups ? res.data.groups : [];\n\n\t\t\t\t\t\tconsole.log('groups fetched: ', res);\n\t\t\t\t\t\treturn this.grps;\n\t\t\t\t\t});\n\t\t\t},\n\t\t\tsockets: function () {\n\t\t\t\taxios.get(`${base_url}/sockets`).then((res, err) => {\n\t\t\t\t\tthis.sckts = res.data && res.data.sockets ? res.data.sockets : [];\n\t\t\t\t\tthis.physical_groups = [];\n\t\t\t\t\tlet current_group = {\n\t\t\t\t\t\tsockets: [],\n\t\t\t\t\t}\n\t\t\t\t\tthis.sckts.forEach(s => {\n\t\t\t\t\t\tcurrent_group.sockets.push(s);\n\t\t\t\t\t\tif(current_group.sockets.length === 2) {\n\t\t\t\t\t\t\tthis.physical_groups.push(current_group);\n\t\t\t\t\t\t\tcurrent_group\t= {\n\t\t\t\t\t\t\t\tsockets: []\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t});\n\t\t\t},\n\t\t\ttoggle: function(socket, event) {\n\t\t\t\taxios.put(`${base_url}/socket/${socket.id}/toggle`).then((res, err) => {\n\t\t\t\t\tif(err) {\n\t\t\t\t\t\tconsole.log('error: ', err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst new_value = res.data.value;\n\t\t\t\t\tconsole.log('sockets: ', this.sckts);\n\t\t\t\t\tsocket.pin.value = new_value;\n\t\t\t\t\tthis.sckts.forEach(s => {\n\t\t\t\t\t\tif(s.pin && s.pin.pin && s.pin.pin === socket.pin.pin) {\n\t\t\t\t\t\t\ts.pin.value = new_value;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\tconsole.log('toggle response', res);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n</script>\n\n<style scoped lang=\"css\">\n\t@import 'styles.css';\n</style>"]}]}